{"version":3,"sources":["pages/Home.js","features/order/orderAPI.js","features/order/orderSlice.js","features/order/Order.js","pages/Ingredients.js","components/OrderSummary.js","components/Form.js","components/Modal.js","pages/Checkout.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Home","isHomePage","useLocation","pathname","className","to","getIngredients","a","fetch","data","json","populateIngredients","createAsyncThunk","result","items","orderSlice","createSlice","name","initialState","ingredients","status","user","showModal","reducers","updateQuantity","state","action","ingredient","payload","quantity","undefined","index","findIndex","item","resetOrder","map","setUserDetails","email","note","toggleModal","extraReducers","builder","addCase","pending","fulfilled","actions","selectIngredients","order","selectUser","selectStatus","selectShowModal","Order","useSelector","dispatch","useDispatch","useEffect","length","type","min","onChange","e","Number","target","value","Ingredients","some","OrderSummary","subtotal","total","filter","price","toFixed","Form","useState","isValid","setIsValid","nameRef","useRef","emailRef","noteRef","checkFormValidity","current","test","onSubmit","preventDefault","htmlFor","id","ref","placeholder","disabled","Modal","props","el","document","createElement","classList","add","modalRoot","getElementById","appendChild","removeChild","ReactDOM","createPortal","children","Checkout","onClick","App","path","store","configureStore","reducer","orderReducer","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17690f2d.chunk.js","sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nfunction Home() {\n  const location = useLocation();\n  const isHomePage = location.pathname === '/';\n  return (\n    <section>\n      <h1>The salad boutique</h1>\n\n      {isHomePage && (\n        <div className='welcome'>\n          <h2>Welcome to the salad boutique!</h2>\n          <p>\n            If you're interested in a delicious and nutritious salad - you've\n            come to the right place!\n          </p>\n          <p>\n            Click on the 'order salad' link to choose some of the most\n            breathtaking ingredients for the salad of your dreams\n          </p>\n          <Link className='link-button' to='/ingredients'>\n            Order Salad\n          </Link>\n        </div>\n      )}\n    </section>\n  );\n}\n\nexport default Home;\n","export async function getIngredients() {\n  const data = await fetch('salad.json');\n  return await data.json();\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getIngredients } from './orderAPI';\n\nconst initialState = {\n  ingredients: [],\n  status: 'idle',\n  user: [],\n  showModal: false,\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const populateIngredients = createAsyncThunk(\n  'order/getIngredients',\n  async () => {\n    // The value we return becomes the `fulfilled` action payload\n    const result = await getIngredients();\n    return result.items;\n  }\n);\n\nexport const orderSlice = createSlice({\n  name: 'order',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    updateQuantity: (state, action) => {\n      const ingredient = action.payload.ingredient;\n      const quantity = action.payload.quantity;\n\n      if (ingredient === undefined || quantity === undefined) return;\n\n      const index = state.ingredients.findIndex(\n        (item) => item.name === ingredient\n      );\n\n      state.ingredients[index].quantity = quantity;\n    },\n    resetOrder: (state) => {\n      state.ingredients = state.ingredients.map((item) => {\n        delete item.quantity;\n        return item;\n      });\n      state.user = [];\n      state.showModal = false;\n    },\n    setUserDetails: (state, action) => {\n      state.user = {\n        name: action.payload.name,\n        email: action.payload.email,\n        note: action.payload.note,\n      };\n    },\n    toggleModal: (state) => {\n      state.showModal = !state.showModal;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(populateIngredients.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(populateIngredients.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.ingredients = action.payload;\n      });\n  },\n});\n\nexport const { updateQuantity, resetOrder, setUserDetails, toggleModal } =\n  orderSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectIngredients = (state) => state.order.ingredients;\nexport const selectUser = (state) => state.order.user;\nexport const selectStatus = (state) => state.order.status;\nexport const selectShowModal = (state) => state.order.showModal;\n\nexport default orderSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  updateQuantity,\n  populateIngredients,\n  selectIngredients,\n  selectStatus,\n} from './orderSlice';\n\nexport function Order() {\n  const ingredients = useSelector(selectIngredients);\n  const status = useSelector(selectStatus);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (ingredients.length > 0) return; // no need to fetch... we already have them!\n    // console.log('fetching...dispatch...');\n    dispatch(populateIngredients());\n  }, [dispatch, ingredients]);\n\n  return (\n    <div>\n      {status === 'loading' ? (\n        <div className='loading'>Loading...</div>\n      ) : (\n        <ul className='order-list'>\n          {ingredients?.length > 0 &&\n            ingredients.map(({ name }) => (\n              <li className='order-item' key={name}>\n                <span>{name}</span>\n                <input\n                  type='number'\n                  min='0'\n                  onChange={(e) =>\n                    dispatch(\n                      updateQuantity({\n                        ingredient: name,\n                        quantity: Number(e.target.value),\n                      })\n                    )\n                  }\n                />\n              </li>\n            ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n","import { Link } from 'react-router-dom';\nimport { Order } from '../features/order/Order';\nimport { useSelector } from 'react-redux';\nimport { selectIngredients } from '../features/order/orderSlice';\nfunction Ingredients() {\n  const ingredients = useSelector(selectIngredients);\n  return (\n    <section>\n      <h2>Ingredients</h2>\n      <p>\n        Please enter how many of each ingredient you would like for your\n        delicious salad\n      </p>\n      <Order />\n      {ingredients.some((item) => item.quantity) && (\n        <Link className='link-button' to='/checkout'>\n          Proceed to Checkout\n        </Link>\n      )}\n    </section>\n  );\n}\n\nexport default Ingredients;\n","import { selectIngredients } from '../features/order/orderSlice';\nimport { useSelector } from 'react-redux';\nfunction OrderSummary() {\n  const ingredients = useSelector(selectIngredients);\n  let total = 0;\n  let subtotal;\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Ingredient</th>\n          <th>Quantity</th>\n          <th>Price</th>\n        </tr>\n      </thead>\n      <tbody>\n        {ingredients?.length > 0 &&\n          ingredients\n            .filter((item) => item.quantity > 0)\n            .map(({ name, price, quantity }) => (\n              <tr key={name}>\n                <td className='ingredient'>{name}</td>\n                <td className='quantity'>{quantity}</td>\n                <td className='price'>\n                  {\n                    ((subtotal = price * quantity),\n                    (total += subtotal),\n                    subtotal.toFixed(2))\n                  }\n                </td>\n              </tr>\n            ))}\n      </tbody>\n      <tfoot>\n        <tr>\n          <td>Total Price:</td>\n          <td>{total.toFixed(2)}</td>\n        </tr>\n      </tfoot>\n    </table>\n  );\n}\n\nexport default OrderSummary;\n","import React, { useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setUserDetails, toggleModal } from '../features/order/orderSlice';\n\nfunction Form() {\n  const [isValid, setIsValid] = useState(false);\n  const nameRef = useRef();\n  const emailRef = useRef();\n  const noteRef = useRef();\n  const dispatch = useDispatch();\n\n  function showModal(e) {\n    e.preventDefault();\n    dispatch(\n      setUserDetails({\n        name: nameRef.current.value,\n        email: emailRef.current.value,\n        note: noteRef.current.value,\n      })\n    );\n    dispatch(toggleModal());\n  }\n\n  function checkFormValidity() {\n    if (\n      nameRef.current.value !== '' &&\n      /^\\S+@\\S+\\.\\S+$/.test(emailRef.current.value)\n    ) {\n      setIsValid(true);\n    } else {\n      setIsValid(false);\n    }\n  }\n\n  return (\n    <form className='checkout-form' onSubmit={showModal}>\n      <div className='form-field'>\n        <label htmlFor='name'>Name:</label>\n        <input\n          type='text'\n          id='name'\n          ref={nameRef}\n          onChange={checkFormValidity}\n        />\n      </div>\n      <div className='form-field'>\n        <label htmlFor='email'>Email:</label>\n        <input\n          type='email'\n          id='email'\n          ref={emailRef}\n          onChange={checkFormValidity}\n        />\n      </div>\n      <div className='form-field text-area'>\n        <label htmlFor='note'>Additional Notes:</label>\n        <textarea\n          placeholder=\"What's on your mind?\"\n          id='note'\n          ref={noteRef}\n          onChange={checkFormValidity}\n        ></textarea>\n      </div>\n\n      <button className='btn-primary' disabled={!isValid}>\n        Order\n      </button>\n    </form>\n  );\n}\n\nexport default Form;\n","import { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Modal(props) {\n  const el = document.createElement('div');\n  el.classList.add('modal');\n\n  useEffect(() => {\n    const modalRoot = document.getElementById('modal-root');\n    // Append the element into the DOM on mount. We'll render\n    // into the modal container element (see the HTML tab).\n    modalRoot.appendChild(el);\n\n    return () => {\n      // Remove the element from the DOM when we unmount\n      modalRoot.removeChild(el);\n    };\n  }, [el]);\n\n  return ReactDOM.createPortal(\n    // Any valid React child: JSX, strings, arrays, etc.\n    props.children,\n    // A DOM element\n    el\n  );\n}\n\nexport default Modal;\n","import OrderSummary from '../components/OrderSummary';\nimport Form from '../components/Form';\nimport Modal from '../components/Modal';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  resetOrder,\n  selectUser,\n  selectShowModal,\n} from '../features/order/orderSlice';\n\nfunction Checkout() {\n  const user = useSelector(selectUser);\n  const showModal = useSelector(selectShowModal);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <h2>Checkout</h2>\n      <div className='checkout'>\n        <OrderSummary />\n        <Form />\n      </div>\n\n      {showModal && (\n        <Modal>\n          <section className='modal-content'>\n            <header>\n              <h2>Order Summary</h2>\n            </header>\n            <div>Name: {user.name}</div>\n            <div>Email: {user.email}</div>\n            {user.note?.length > 0 && <div>Note: {user.note}</div>}\n            <OrderSummary />\n\n            <div>Thanks for shopping at the salad boutique!</div>\n            <div>Your delivery is on the way!</div>\n\n            <Link\n              className='link-button'\n              onClick={() => dispatch(resetOrder())}\n              to='/'\n            >\n              Close\n            </Link>\n          </section>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Checkout;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Ingredients from './pages/Ingredients';\nimport Checkout from './pages/Checkout';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className='app'>\n        <Route path='/'>\n          <Home />\n        </Route>\n        <Route path='/ingredients'>\n          <Ingredients />\n        </Route>\n        <Route path='/checkout'>\n          <Checkout />\n        </Route>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport orderReducer from '../features/order/orderSlice';\n\nexport const store = configureStore({\n  reducer: {\n    order: orderReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}